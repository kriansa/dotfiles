#!/usr/bin/env bash
#
# Desktop Handler for Watchmon
# Receives a payload from watchmon and automatically configure the displays using xrandr

# Configure monitor aliases so we can easily identify them on the `setup` below.
# You can omit this completely if you want to refer to them by IDs instead.
EDID_ALIASES=(
  7B59785F:LAPTOP
  # This is the same monitor that shows different EDIDs at different ocasions.
  047F801B:PRIMARY
  93F8B109:PRIMARY
  266B2343:PRIMARY
)

declare MONITORS MONITORS_COUNT MONITORS_STRING

setup() {
  # Single monitor: just enable it as primary
  if [ $MONITORS_COUNT = 1 ]; then
    xrandr --output "${MONITORS_STRING%:*}" --auto --primary
    return
  fi

  # Multi-monitor setup
  case "$MONITORS_STRING" in
    # ========================================================
    # Known monitor setups
    # ========================================================
    eDP-1:LAPTOP+DP-1:PRIMARY) # Primary desk configuration
      xrandr --output DP-1 --auto --pos 0x0 --primary \
        --output eDP-1 --auto --pos 3440x1200
      ;;

    # ========================================================
    # Handle exceptional cases: no monitor or no configuration
    # ========================================================
    "")
      xrandr # Turn off all monitors if no params are passed
      echo "No monitor plugged in."
      exit
      ;;
    *)
      # Enable all, but still warn the user
      for monitor in "${MONITORS[@]}"; do
        params+=(--output "${monitor%:*}" --auto)
      done

      xrandr "${params[@]}"

      echo "Monitor setup not configured: [$MONITORS_STRING]"
      notify-send "Monitor setup not configured" \
        "Configuration string: $MONITORS_STRING\nRun 'Arandr' to configure it manually."
      ;;
  esac
}

# Do any operation prior to the monitor rearrangement such as killing apps that don't handle display
# readjustments very well or might have unexpected behavior
pre_setup() {
  # Stop polybar so it doesn't need to overthink about which monitor to use
  systemctl --user stop polybar
}

post_setup() {
  # Set background
  feh --bg-fill --no-fehbg ~/.local/share/backgrounds/2021-10-02-18-55-51-bridge.png

  # Ensure polybar is started as it might shutdown when no monitors are found
  systemctl --user start polybar

  # Reconfigure monitors
  herbstclient detect_monitors
}

# Wrapper for `xrandr` that automatically turns off all available outputs that have not been
# specified in the command line. This is both convenient for the user but also very important that
# the system always register the modeset when a monitor is plugged off, avoiding issues such as the
# monitor getting out of sync on X11 -- and eventually throwing GPUs off the bus.
# See: https://gitlab.freedesktop.org/drm/intel/-/issues/6224
xrandr() {
  args=($@)

  configured_outputs=()
  while [ $# -gt 0 ]; do
    if [ $1 == "--output" ]; then
      configured_outputs+=("$2")
      shift
    fi
    shift
  done

  # ENHANCE: This algo is up to O(N^2). In this case is just fine because it only handles small sets
  # of data, but if there are a simple solution that can make it more efficient, I'm all for it.
  while IFS= read -r available_output; do
    has_match=0
    for output_set in "${configured_outputs[@]}"; do
      test "$available_output" = "$output_set" && has_match=1
    done

    # If an available output is not present in the plugged outputs, it means it's disconnected,
    # hence added for being turned off in case it was previously configured
    test $has_match = 0 && args+=("--output" "$available_output" "--off")
  done < <(command xrandr -q | grep -Eo "^[[:alpha:]]+-[-[:digit:]]+")

  command xrandr "${args[@]}"
}

main() {
  # Get all monitors in an array and as a single string, joined by +
  MONITORS=($@)
  MONITORS_COUNT=$#
  IFS="+"; MONITORS_STRING="$*"; IFS=$'\n'

  # Replace EDID hashes by aliases if we have them
  if [ ${#EDID_ALIASES} -ne 0 ]; then
    for alias in "${EDID_ALIASES[@]}"; do
      edid="${alias%:*}"
      name="${alias#*:}"
      sed_args+=(-e "s/:$edid/:$name/")
    done
    MONITORS_STRING=$(sed "${sed_args[@]}" <<< "$MONITORS_STRING")
  fi

  echo "dh-watchmon called with: [$@]"
  pre_setup
  setup
  post_setup
}

main "$@"
