#!/usr/bin/env ruby

# When we're running without bundler, then we need to make sure the composed bundle is fully configured and re-execute
# using `BUNDLE_GEMFILE=.ruby-lsp/Gemfile bundle exec ruby-lsp` so that we have access to the gems that are a part of
# the application's bundle
if ENV["BUNDLE_GEMFILE"].nil?
  require "ruby_lsp/setup_bundler"

  # Pretend it's a Rails app so we also install the ruby-lsp-rails addon
  class CustomSetupBundler < RubyLsp::SetupBundler
    def rails_app?
      true
    end
  end

  begin
    env = CustomSetupBundler.new(Dir.pwd).setup!
  rescue RubyLsp::SetupBundler::BundleNotLocked
    warn("Project contains a Gemfile, but no Gemfile.lock. Run `bundle install` to lock gems and restart the server")
    exit(78)
  end

  bundler_path = File.join(Gem.default_bindir, "bundle")
  base_command = (!Gem.win_platform? && File.exist?(bundler_path) ? "#{Gem.ruby} #{bundler_path}" : "bundle").dup

  if env["BUNDLER_VERSION"]
    base_command << " _#{env["BUNDLER_VERSION"]}_"
  end

  exit exec(env, "#{base_command} exec ruby-lsp-thin #{ARGV.join(" ")}".strip)
end

require "ruby_lsp/internal"

# Ensure all output goes out stderr by default to allow puts/p/pp to work
# without specifying output device.
$> = $stderr

# Override default behavior of including project addons
# See: https://github.com/Shopify/ruby-lsp/issues/3418
class CustomServer < RubyLsp::Server
  def load_addons(include_project_addons: false)
    super(include_project_addons: false)
  end
end

CustomServer.new.start
