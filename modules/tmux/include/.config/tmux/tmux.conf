# Better compatibility with NVIM
set -g mode-keys vi     # Use vi key bindings for when on copy-mode
set -g focus-events on  # Send focus events to client applications

# Enable true-color support
set -as terminal-features ",*:RGB"
# set -g default-terminal "xterm-256color"
# set -g terminal-overrides ",*:RGB"

# We don't use history on the terminal emulator, so tmux is responsible for keeping a scrollback
# buffer for convenience
set -g history-limit 20000

# Basic display settings
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on
set -g set-titles-string "#W"

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# Activity
set -g monitor-activity on
set -g visual-activity off
set -g status-interval 1 # update the status line every second
set -g mouse on

# Display the session name if there's a named one
set -g status-left "#{?session_name,#[bg=$green]#[fg=$dark_gray] #S #[default],}"

# Minimalistic view
set -g status-right ""
set -g status-right-length 0
set -g status-justify left
set -g status-left-length 100

# Window list status styling
set -g window-status-separator ''  # No spaces between windows in the status bar.
set -g window-status-format " #I:#W#{?window_zoomed_flag, #[fg=darkgray]󰁌 ,#{?pane_synchronized, #[fg=darkgray]󱢓 ,}} "
set -g window-status-current-format " #I:#W#{?window_zoomed_flag, #[fg=green]󰁌 ,#{?pane_synchronized, #[fg=yellow]󱢓 ,}} "

# Show the tab bar only when there's at least 2 windows open
if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"
set-hook -g window-linked 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'
set-hook -g window-unlinked 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'
set-hook -g after-split-window 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'
set-hook -g pane-exited 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'

# Bindings

# Creates a custom key table so that we can send custom keystrokes to tmux using any terminal
# emulator that is capable of doing so. Instead of worrying about sending the right keycode and
# capturing it directly on tmux, we send all keystrokes that we want to bind as key codes prefixed
# by C-\\ (hex 0x1c) and it can be picked up here by using this custom key table.
# This is what allows term emulator bindings to work cross platform between Linux and MacOS
bind -n C-\\ switch-client -T emuprefix

# new window
bind -T emuprefix t new-window

# splitting windows
bind -T emuprefix d split-window -h -c "#{pane_current_path}"
bind -T emuprefix D split-window -c "#{pane_current_path}"

# toggle pane zoom
bind -T emuprefix Enter resize-pane -Z

# navigate panels without cycling through them (alt + hjkl)
bind -T emuprefix h select-pane -LZ
bind -T emuprefix l select-pane -RZ
bind -T emuprefix j select-pane -DZ
bind -T emuprefix k select-pane -UZ

# pane resizing (alt-shift + hjkl)
bind -T emuprefix H resize-pane -L 2
bind -T emuprefix J resize-pane -D 2
bind -T emuprefix K resize-pane -U 2
bind -T emuprefix L resize-pane -R 2

# navigate between window (tabs)
bind -T emuprefix ] next-window
bind -T emuprefix [ previous-window
bind -T emuprefix 0 select-window -t 0
bind -T emuprefix 1 select-window -t 1
bind -T emuprefix 2 select-window -t 2
bind -T emuprefix 3 select-window -t 3
bind -T emuprefix 4 select-window -t 4
bind -T emuprefix 5 select-window -t 5
bind -T emuprefix 6 select-window -t 6
bind -T emuprefix 7 select-window -t 7
bind -T emuprefix 8 select-window -t 8
bind -T emuprefix 9 select-window -t 9

# ---------------------------------------
# Bindings using the default prefix table

# Disable default window navigation bindings
unbind n
unbind p

# Pane navigation
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# Reload configuration
bind r source-file ~/.config/tmux/tmux.conf \; display-message -d 500 'Config reloaded'

# Clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Enter copy mode
bind Enter copy-mode
bind j copy-mode
bind C-d copy-mode
bind k copy-mode \; send-keys -X cursor-up
bind C-u copy-mode \; send-keys -X halfpage-up
bind -n S-PageUp copy-mode \; send-keys -X page-up
bind -n S-PageDown copy-mode \; send-keys -X page-down

# Toggle synchronize panes (send all keystrokes across open panels in a window)
bind s set-window-option synchronize-panes \; display-message -d 500 "Pane synchronization #{?pane_synchronized,on,off}"

# Use same shortcuts as Vim for copy-mode-vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

# Disable default behavior of automatically moving to the end of the terminal after selecting text
# with mouse
unbind -T copy-mode MouseDragEnd1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane

# Since MouseDragEnd1Pane neither exit copy-mode nor clear selection now, let single click do
# selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# Theme
# One light color scheme
set -g status-style fg=white,bg=colour18
set -g window-status-style fg=default,bg=default
set -g window-status-current-style fg=black,bg=white
set -g window-status-activity-style bold
set -g window-status-bell-style bold
set -g pane-border-style fg=colour18
set -g pane-active-border-style fg=cyan
set -g message-style fg=black,bg=red
