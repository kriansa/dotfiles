# Basic settings
setw -q -g utf8 on
setw -g xterm-keys on
setw -g mode-keys vi
set -g escape-time 10
set -g focus-events on

# Enable true-color support
set -g default-terminal "tmux-256color"
set -g terminal-overrides ",*:RGB"

# We don't use history on the terminal emulator, so tmux is responsible for keeping a scrollback
# buffer for convenience
set -g history-limit 5000

# Basic display settings
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# Activity
set -g monitor-activity on
set -g visual-activity off
set -g status-interval 1 # update the status line every second
set -g mouse on

# Display the session name if there's a named one
set -g status-left "#{?session_name,#[bg=$green]#[fg=$dark_gray] #S #[default],}"

# Minimalistic view
set -g status-right ""
set -g status-right-length 0
set -g status-justify left
set -g status-left-length 100

# Window list status styling
set -g window-status-separator ''  # No spaces between windows in the status bar.
set -g window-status-format " #I:#W#{?window_zoomed_flag, #[fg=gray]󰁌 ,#{?pane_synchronized, #[fg=gray]󱢓 ,}} "
set -g window-status-current-format " #I:#W#{?window_zoomed_flag, #[fg=green]󰁌 ,#{?pane_synchronized, #[fg=yellow]󱢓 ,}} "

# Show the tab bar only when there's at least 2 windows open
if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"
set-hook -g window-linked 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'
set-hook -g window-unlinked 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'
set-hook -g after-split-window 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'
set-hook -g pane-exited 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "set -g status off" "set -g status on"'

# Bindings

# Creates a custom key table so that we can send custom keystrokes to tmux using any terminal
# emulator that is capable of doing so. Instead of worrying about sending the right keycode and
# capturing it directly on tmux, we send all keystrokes that we want to bind as key codes prefixed
# by C-\\ (hex 0x1c) and it can be picked up here by using this custom key table.
# This is what allows alacritty bindings to work cross platform between Linux and MacOS
bind -n C-\\ switch-client -T alacritty

# new window
bind -T alacritty t new-window

# splitting windows
bind -T alacritty d split-window -h -c "#{pane_current_path}"
bind -T alacritty D split-window -c "#{pane_current_path}"

# toggle pane zoom
bind -T alacritty Enter resize-pane -Z

# navigate panels without cycling through them (alt + hjkl)
bind -T alacritty h if -F '#{pane_at_left}' '' 'select-pane -L'
bind -T alacritty l if -F '#{pane_at_right}' '' 'select-pane -R'
bind -T alacritty j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T alacritty k if -F '#{pane_at_top}' '' 'select-pane -U'

# pane resizing (alt-shift + hjkl)
bind -T alacritty H resize-pane -L 2
bind -T alacritty J resize-pane -D 2
bind -T alacritty K resize-pane -U 2
bind -T alacritty L resize-pane -R 2

# navigate between window (tabs)
bind -T alacritty ] next-window
bind -T alacritty [ previous-window
bind -T alacritty 0 select-window -t 0
bind -T alacritty 1 select-window -t 1
bind -T alacritty 2 select-window -t 2
bind -T alacritty 3 select-window -t 3
bind -T alacritty 4 select-window -t 4
bind -T alacritty 5 select-window -t 5
bind -T alacritty 6 select-window -t 6
bind -T alacritty 7 select-window -t 7
bind -T alacritty 8 select-window -t 8
bind -T alacritty 9 select-window -t 9

# ---------------------------------------
# Bindings using the default prefix table

# Disable default window navigation bindings
unbind n
unbind p

# Pane navigation
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# Reload configuration
bind r source-file ~/.config/tmux/tmux.conf \; display-message -d 500 'Config reloaded'

# Clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Enter copy mode
bind Enter copy-mode
bind j copy-mode
bind k copy-mode \; send-keys -X cursor-up

# Toggle synchronize panes (send all keystrokes across open panels in a window)
bind s set-window-option synchronize-panes \; display-message -d 500 "Pane synchronization #{?pane_synchronized,on,off}"

# Session management
# bind C-c new-session
# bind C-f command-prompt -p find-session 'switch-client -t %%'

# Use same shortcuts as Vim for copy-mode-vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

# Disable default behavior of automatically moving to the end of the terminal after selecting text
# with mouse
unbind -T copy-mode MouseDragEnd1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane

# Since MouseDragEnd1Pane neither exit copy-mode nor clear selection now, let single click do
# selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# This line changes the default binding of MouseDrag1Pane, the only difference is that we use
# `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane can trigger copy-mode to exit
# when copy-mode is entered by MouseDrag1Pane
bind -n MouseDrag1Pane if -Ft= '#{mouse_any_flag}' 'if -Ft= \"#{pane_in_mode}\" \"copy-mode -eM\" \"send-keys -M\"' 'copy-mode -eM'

# Theme

# Dracula color scheme
# white='#f8f8f2'
# gray='#44475a'
# dark_gray='#282a36'
# light_purple='#bd93f9'
# dark_purple='#6272a4'
# green='#50fa7b'
# set -g status-style "bg=$gray,fg=$white"
# set -g window-status-bell-style "bold"
# set -g window-status-activity-style "bold"
# set -g window-status-current-style "bg=$dark_purple"
# set -g pane-active-border-style "fg=$light_purple"
# set -g pane-border-style "fg=$gray"
# set -g message-style "bg=$gray,fg=$white"

# One light color scheme
set -g status-style fg=white,bg=brightyellow
set -g window-status-style fg=default,bg=default
set -g window-status-current-style fg=black,bg=white
set -g window-status-activity-style bold
set -g window-status-bell-style bold
set -g pane-border-style fg=brightyellow
set -g pane-active-border-style fg=cyan
set -g message-style fg=black,bg=red
