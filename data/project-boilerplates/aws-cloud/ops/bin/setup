#!/usr/bin/env bash
#
# This script bootstraps your AWS account to support Terraform state using S3 + DynamoDB as the
# backend.
#
# It assumes that you have the following environment variables set (or present on root .env):
# * AWS_DEFAULT_REGION
# * AWS_PROFILE (or the combo AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY)
# * TERRAFORM_BACKEND_S3_BUCKET
# * TERRAFORM_BACKEND_DYNAMO_TABLE
#
# See: https://www.terraform.io/docs/backends/types/s3.html

main() {
  # cd to root path
  cd "$(dirname "$0")/../.." || exit

  # Load the dotenv file
  # shellcheck disable=SC1091
  set -a && source ".env" && set +a

  create_s3_bucket
  create_dynamo_table
}

create_s3_bucket() {
  if aws s3api head-bucket --bucket "$TERRAFORM_BACKEND_S3_BUCKET" > /dev/null 2>&1; then
    echo "The S3 bucket already exists. Skipping."
    return
  fi

  aws s3api create-bucket --bucket "$TERRAFORM_BACKEND_S3_BUCKET" > /dev/null

  aws s3api wait bucket-exists --bucket "$TERRAFORM_BACKEND_S3_BUCKET"

  aws s3api put-bucket-versioning --bucket "$TERRAFORM_BACKEND_S3_BUCKET" \
    --versioning-configuration "Status=Enabled"

  # Create a tempfile to store the file content
  local tmpfile; tmpfile=$(mktemp);
  # shellcheck disable=2064
  trap "{ rm -f $tmpfile; }" EXIT

  echo '{ "Rules": [{ "Filter": {}, "NoncurrentVersionExpiration": { "NoncurrentDays": 30 }, "Status": "Enabled" }] }' > "$tmpfile"

  aws s3api put-bucket-lifecycle-configuration --bucket "$TERRAFORM_BACKEND_S3_BUCKET" \
    --lifecycle-configuration "file://$tmpfile"

  echo "The S3 bucket has been created successfully!"
}

create_dynamo_table() {
  if aws dynamodb describe-table --table-name "$TERRAFORM_BACKEND_DYNAMO_TABLE" > /dev/null 2>&1; then
    echo "The DynamoDB table already exists. Skipping."
    return
  fi

  aws dynamodb create-table \
    --table-name "$TERRAFORM_BACKEND_DYNAMO_TABLE" \
    --attribute-definitions "AttributeName=LockID,AttributeType=S" \
    --key-schema "AttributeName=LockID,KeyType=HASH" \
    --billing-mode "PROVISIONED" \
    --provisioned-throughput "ReadCapacityUnits=1,WriteCapacityUnits=1" > /dev/null

  echo "The DynamoDB table has been created successfully!"
}

main
