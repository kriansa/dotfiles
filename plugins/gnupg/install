#!/usr/bin/env zsh

# Plugin gnupg
# Installation proccess:
#
#  1. Install needed packages
#  2. Adds symlinks
#  3. Import data
#  4. Generate conf file
#

source 'helpers/installer_helper.zsh'
PLUGIN_PATH=$0:A:h
DOTFILES_ROOT=$(pwd)

# 1. Install GnuPG 2.1
if [[ $OS_NAME == "OSX" ]]; then
  brew install gnupg@2.1 pinentry-mac

  link_file $PLUGIN_PATH "Library/LaunchAgents/org.gnupg.gpg-agent.plist"
  launchctl load $HOME/Library/LaunchAgents/org.gnupg.gpg-agent.plist
fi

# 2. Link all the files
link_file $PLUGIN_PATH ".gnupg/dirmngr.conf"
link_file $PLUGIN_PATH ".gnupg/gpg.conf"
link_file $PLUGIN_PATH ".gnupg/sshcontrol"
link_file $PLUGIN_PATH ".gnupg/sks-keyservers.netCA.pem"

# 3. Import public keys, private stubs and ownertrust
gpg --import < $PLUGIN_PATH/data/public-keys.asc
gpg --import-ownertrust < $PLUGIN_PATH/data/ownertrust.txt
# To import private stubs (for the real keys located in the HSM), we only have
#   to make sure the HSM card is connected and run gpg --card-status
gpg --card-status

# 4. Now let's create our gpg-agent file based on our example
# This is required so each platform have its own file
if [[ -f $HOME/.gnupg/gpg-agent.conf ]]; then
  info "File \"$HOME/.gnupg/gpg-agent.conf\" already exists!"
  exit
fi

if [[ $OS_NAME == "OSX" ]]; then
  gpg_pinentry=$(which pinentry-mac)
else
  gpg_pinentry=$(which pinentry-gnome3)
fi

sed -e "s#PINENTRY_PATH#$gpg_pinentry#g" \
  -e "s#HOMEDIR#$HOME#g" \
  $PLUGIN_PATH/data/gpg-agent.conf.example > $PLUGIN_PATH/include/.gnupg/gpg-agent.conf

link_file $PLUGIN_PATH ".gnupg/gpg-agent.conf"
