#!/usr/bin/env ruby
# frozen_string_literal: true

# This program will generate ctags file for entire projects
# Its interface is defined as below:
#
#    The first and only parameter is the file path for which you want
#    to scan and generate/update the ctags. You can use a relative
#    path to the pwd, or pass an absolute path.
#
#    You can pass a entire directory as a parameter if you want.
#
#    The tags will be generated based on the pwd path - so ensure you
#    run it from within the root folder of your project.
#
#    You need to pass the parameter -f to set the output ctags file.
#
# Options are:
# => -f   Set the ctags output file (required)
# => -v   Verbose mode (off by default)

require 'optparse'

options = {
  destination: nil,
  verbose: false
}

OptionParser.new do |opts|
  opts.banner = 'Usage: vim-tags [options] <source path>'

  opts.on('-f FILE', String, 'Destination file') do |f|
    options[:destination] = f
  end

  opts.on('-v', '--verbose', 'Verbose mode') do
    options[:verbose] = true
  end

  # Unused options to keep compatibility with ctags
  opts.on('--exclude=[GLOB]', 'Exclude files') {}
  opts.on('--options=[OPTIONFILE]', 'Option not used') {}
  opts.on('--append', 'Option not used') {}
end.parse!

# Detect tags output path
project_path = Dir.pwd
tags_output = File.absolute_path(options[:destination], project_path)

# Parse a .tagsignore located at the same folder as the tags output
# If not present, use a global ignore file, located at
# $RUBYPLUGINPATH/data/.tagsignore
#
# @param [String] project_path
def parse_tagsignore_file(project_path)
  ignore_files = []
  ignore_files << File.expand_path('../data/.tagsignore',
                                   File.dirname(__FILE__))

  # Add the project's git ignored files
  git_ignore_file = "#{project_path}/.gitignore"
  ignore_files << git_ignore_file if File.exist?(git_ignore_file)

  ignore_files.each do |file|
    IO.foreach(file).uniq.each do |path|
      next if path.start_with?('#', '!') ||
              path.include?('*') || path.strip.empty?

      yield path.strip if block_given?
    end
  end
end

# Starscope is a ctags generator for Ruby, Javascript and Go files
#
# @param [String] project_path
# @param [String] tags_output
# @param [Hash] options
def generate_tags_with_starscope(project_path, tags_output, options)
  starscope_db_output = File.dirname(tags_output) + '/starscope.db'

  # Start creating the cmdline
  commandline = ["cd \"#{project_path}\" && starscope"]

  # Adds ignore files
  commandline << '--exclude .git'
  parse_tagsignore_file(project_path) do |path|
    commandline << "--exclude \"#{path}\""
  end

  # Set output paths
  commandline << "--file \"#{starscope_db_output}\""
  commandline << "--export ctags,\"#{tags_output}\""

  unless options[:verbose]
    commandline << '--quiet'
    commandline << '> /dev/null 2>&1'
  end

  # Execute it!
  system commandline.join(' ')
end

# Currently, uses only starscope
generate_tags_with_starscope(project_path, tags_output, options)
