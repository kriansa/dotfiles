# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# Emmet plugin
'atom-text-editor[data-grammar="text html basic"]:not([mini]), atom-text-editor[data-grammar~="erb"]:not([mini]), atom-text-editor[data-grammar~="jade"]:not([mini]), atom-text-editor[data-grammar~="css"]:not([mini]), atom-text-editor[data-grammar~="stylus"]:not([mini]), atom-text-editor[data-grammar~="sass"]:not([mini]), atom-text-editor[data-grammar~="scss"]:not([mini])':
  'tab': 'emmet:expand-abbreviation-with-tab'

'atom-pane atom-text-editor[data-grammar~="html"]:not([mini]):not(.autocomplete-active), atom-pane atom-text-editor[data-grammar~="xml"]:not([mini]):not(.autocomplete-active)':
  'enter': 'emmet:insert-formatted-line-break-only'

'.platform-darwin atom-text-editor:not([mini])':
  'shift-cmd-E': 'emmet:expand-abbreviation'

# Normal mode bindings
'atom-text-editor.vim-mode-plus.normal-mode':
  # Vim-mode-plus surround keys
  'y s': 'vim-mode-plus:surround'
  'd s': 'vim-mode-plus:delete-surround'
  'c s': 'vim-mode-plus:change-surround'

  # Esc esc to clear the search
  'escape escape': 'vim-mode-plus:clear-highlight-search'

  # Tab to switch tabs
  'tab': 'pane:show-next-item'
  'shift-tab': 'pane:show-previous-item'

  # Overrides default behavior of vim.
  # D deletes from the cursor to the end of the line; C changes from the cursor
  # to the end of the line. For some reason, however, Y yanks the entire line,
  # both before and after the cursor.
  'Y': 'vim-mode-plus:yank-to-last-character-of-line'

'atom-text-editor.vim-mode-plus.operator-pending-mode.surround-pending':
  's': 'vim-mode-plus:inner-current-line'

'atom-text-editor.vim-mode-plus.operator-pending-mode':
  'Y': 'vim-mode-plus:yank vim-mode-plus:set-input-char-$'

# Visual mode bindings
'atom-text-editor.vim-mode-plus.visual-mode:not(.insert-mode)':
  'S': 'vim-mode-plus:surround'

# Insert mode bindings
'atom-text-editor.vim-mode-plus.insert-mode':
  # jk to escape insert mode (besides esc, ctrl-[ and ctrl-c)
  'j k': 'vim-mode-plus:activate-normal-mode'
